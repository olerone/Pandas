"Here i will be explaining some changes made in Pandas version 0.25.0 which was released in July 18th 2019"
"This   version of Pandas supports Python 3.5.3 and higher"
"In this version also,Panel has been fully removed. For N-D labeled data structures, please use xarray"
"""
Created on Sat Aug 10 11:41:40 2019

@author: sola
"""

"Groupby aggregation with relabeling"
"Pandas has added special groupby behavior, known as “named aggregation”, for naming the output columns when"
"applying multiple aggregation functions to specific columns"
"input"

import pandas as pd 
animals = pd.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'],
'height': [9.1, 6.0, 9.5, 34.0],
'weight': [7.9, 7.5, 9.9, 198.0]})



"Now to call the animals records"
"input"
animals

"output"
  kind	height	weight
0	cat	   9.1	    7.9
1	dog	   6.0	    7.5
2	cat	   9.5	    9.9
3	dog	   34.0	  198.0


"in the next section, we will group each kind based on the minimum height,maximum weight, and average weight "
"input"
animals.groupby("kind").agg(
 min_height=pd.NamedAgg(column='height', aggfunc='min'),
 max_height=pd.NamedAgg(column='height', aggfunc='max'),
average_weight=pd.NamedAgg(column='weight', aggfunc=np.mean),


"output"
kind min_height max_height average_weight

cat   9.1        9.5          8.90
dog   6.0        34.0         102.75




"Printing of MultiIndex instances now shows tuples of each row and ensures that the tuple items are vertically
aligned, so it’s now easier to understand the structure of the MultiIndex"

"input"
pd.MultiIndex.from_product([['a', 'abc'], range(500)])

"output"
MultiIndex([( 'a', 0),
( 'a', 1),
( 'a', 2),
( 'a', 3),
( 'a', 4),
( 'a', 5),
( 'a', 6),
( 'a', 7),
( 'a', 8),
( 'a', 9),
...
('abc', 490),
('abc', 491),
('abc', 492),
('abc', 493),
('abc', 494),
('abc', 495),
('abc', 496),
('abc', 497),
('abc', 498),
('abc', 499)],
length=1000)



"Creating a long form DataFrame is now straightforward using chained operations"
"input"
df.assign(var1=df.var1.str.split(',')).explode('var1')

"output"
  var1 var2
0  a    1
0  b    1
0  c    1
1  d    2
1  e    2
1  f    2
 )




"Json normalize with max_level param support"
"json_normalize() normalizes the provided input dict to all nested levels. The new max_level parameter provides
more control over which level to end normalization"

"input"
from pandas.io.json import json_normalize

"output"
data = [{
'CreatedBy': {'Name': 'User001'},
 'Lookup': {'TextField': 'Some text',
 'UserField': {'Id': 'ID001', 'Name': 'Name001'}},
'Image': {'a': 'b'}
 }]

"input"
json_normalize(data, max_level=1)

"output"
CreatedBy.Name Lookup.TextField Lookup.UserField Image.a
0 User001 Some text {'Id': 'ID001', 'Name': 'Name001'} b
